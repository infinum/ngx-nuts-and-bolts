"use strict";(self.webpackChunkngx_nuts_and_bolts_docs=self.webpackChunkngx_nuts_and_bolts_docs||[]).push([[839],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return n?i.createElement(f,r(r({ref:t},u),{},{components:n})):i.createElement(f,r({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},825:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var i=n(7462),a=n(3366),o=(n(7294),n(3905)),r=["components"],l={id:"file-cva",title:"File Control Value Accessor",sidebar_label:"File Control Value Accessor"},s=void 0,p={unversionedId:"form-utils/file-cva",id:"form-utils/file-cva",title:"File Control Value Accessor",description:"1. Features",source:"@site/docs/form-utils/file-cva.md",sourceDirName:"form-utils",slug:"/form-utils/file-cva",permalink:"/ngx-nuts-and-bolts/docs/form-utils/file-cva",tags:[],version:"current",frontMatter:{id:"file-cva",title:"File Control Value Accessor",sidebar_label:"File Control Value Accessor"},sidebar:"mainSidebar",previous:{title:"Form value type",permalink:"/ngx-nuts-and-bolts/docs/form-utils/form-value-type"},next:{title:"Extract public",permalink:"/ngx-nuts-and-bolts/docs/testing-utils/extract-public"}},u=[{value:"1. Features",id:"1-features",children:[],level:2},{value:"2. Usage",id:"2-usage",children:[],level:2},{value:"3. Unit testing quirks",id:"3-unit-testing-quirks",children:[],level:2}],c={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"1-features"},"1. Features"),(0,o.kt)("p",null,'Out-of-the-box, if you want to bind a file input element to an Angular form control, the value of the Angular form control will be the a "fake path" to the file (e.g. ',(0,o.kt)("inlineCode",{parentName:"p"},"C:\\\\fakepath\\\\some-image.png"),') and it does not work at all if you select multiple files (the value will be a "fake path" of just one of the files).'),(0,o.kt)("p",null,"This is not very useful and you often have to write custom code to read ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/files"},(0,o.kt)("inlineCode",{parentName:"a"},"HTMLInputElement")," ",(0,o.kt)("inlineCode",{parentName:"a"},"files")," property")," property directly, which gives you access to the ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/FileList"},(0,o.kt)("inlineCode",{parentName:"a"},"FileList")),"."),(0,o.kt)("p",null,"That is why we have implemented a ",(0,o.kt)("a",{parentName:"p",href:"https://angular.dev/api/forms/ControlValueAccessor"},"Control Value Accessor")," for ",(0,o.kt)("inlineCode",{parentName:"p"},'input[type="file"]')," elements. It makes the value of the bound Angular Form Control the same value as the ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/files"},(0,o.kt)("inlineCode",{parentName:"a"},"HTMLInputElement")," ",(0,o.kt)("inlineCode",{parentName:"a"},"files")," property"),", which is ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/FileList"},(0,o.kt)("inlineCode",{parentName:"a"},"FileList")),"."),(0,o.kt)("h2",{id:"2-usage"},"2. Usage"),(0,o.kt)("p",null,"First, define your FormControl and expect the value to be ",(0,o.kt)("inlineCode",{parentName:"p"},"FileList | null"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { fileExtensionValidator, FileControlValueAccessorDirective } from '@infinum/ngx-nuts-and-bolts/form-utils';\n\nclass MyComponent {\n  protected readonly allowedExtensions = [\n    '.jpg',\n    '.png',\n    '.xlsx',\n    '.csv'\n  ];\n\n  protected readonly fileFormControl = new FormControl<FileList | null>(\n    null,\n    [\n      Validators.required,\n      fileExtensionValidator(this.allowedExtensions),\n    ]\n  );\n}\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use of ",(0,o.kt)("inlineCode",{parentName:"p"},"fileExtensionValidator")," is optional and the validator works even if the File CVA directive is not used, but it is recommended to use them in conjunction."))),(0,o.kt)("p",null,"Next, Make sure to import ",(0,o.kt)("inlineCode",{parentName:"p"},"FileControlValueAccessorDirective")," in your component or module where you want to use the File CVA. You can then bind the form control to the ",(0,o.kt)("inlineCode",{parentName:"p"},'input[type="file"]')," element:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<input\n  type="file"\n  [formControl]="fileFormControl"\n  [accept]="allowedExtensions"\n  [multiple]="true"\n/>\n')),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Remember to set the ",(0,o.kt)("inlineCode",{parentName:"p"},"accept")," attribute to the allowed file extensions so that the file picker only shows files with the allowed extensions."),(0,o.kt)("p",{parentName:"div"},"Accepted values are ",(0,o.kt)("inlineCode",{parentName:"p"},"Array<string>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),". For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"'.jpg,.png'")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"['.jpg', '.png']"),"."),(0,o.kt)("p",{parentName:"div"},"This makes it easy to re-use the same list of allowed extensions in both the ",(0,o.kt)("inlineCode",{parentName:"p"},"accept")," attribute and the ",(0,o.kt)("inlineCode",{parentName:"p"},"fileExtensionValidator"),"."))),(0,o.kt)("p",null,"If no file is selected, the value of the form control will be ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),". If some file(s) are selected, the value of the form control will be a ",(0,o.kt)("inlineCode",{parentName:"p"},"FileList")," object. No matter if ",(0,o.kt)("inlineCode",{parentName:"p"},"multiple")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", the value of the form control will always be ",(0,o.kt)("inlineCode",{parentName:"p"},"FileList"),", with one or more files in the ",(0,o.kt)("inlineCode",{parentName:"p"},"FileList"),"."),(0,o.kt)("p",null,"See storybook for the full example."),(0,o.kt)("h2",{id:"3-unit-testing-quirks"},"3. Unit testing quirks"),(0,o.kt)("p",null,"If using ",(0,o.kt)("inlineCode",{parentName:"p"},"jest"),", you might have issues unit testing components that use this directive. This is because ",(0,o.kt)("inlineCode",{parentName:"p"},"jest")," does not run the tests inside a real browser, it uses ",(0,o.kt)("inlineCode",{parentName:"p"},"jsdom")," instead."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"jsdom")," does not support the ",(0,o.kt)("inlineCode",{parentName:"p"},"DataTransfer")," API, which makes it impossible to mock the selection of files for the input element. It is also not possible to create an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"FileList")," in order to assign it as file input element's value."),(0,o.kt)("p",null,"Currently, we are not aware of any easy workarounds, but will update this documentation if/when we do."),(0,o.kt)("p",null,"This is not a concern if using Karma, Web Test Runner or other browser-based test runners."),(0,o.kt)("p",null,"Unit tests in this repo have been manually checked in a Karma+Jasmine environment and are passing."))}m.isMDXComponent=!0}}]);