"use strict";(self.webpackChunkngx_nuts_and_bolts_docs=self.webpackChunkngx_nuts_and_bolts_docs||[]).push([[22],{9857:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return m}});var r=a(7462),n=a(3366),i=(a(7294),a(3905)),o=a.p+"assets/medias/demo-app-recording-de3c160577ab21441b2356c75b44b8e0.mp4",l=a(2004),s=a.n(l),d=["components"],u={id:"breadcrumbs",title:"Breadcrumbs",sidebar_label:"Breadcrumbs"},p=void 0,c={unversionedId:"breadcrumbs",id:"breadcrumbs",title:"Breadcrumbs",description:"1. Features",source:"@site/docs/breadcrumbs.mdx",sourceDirName:".",slug:"/breadcrumbs",permalink:"/ngx-nuts-and-bolts/docs/breadcrumbs",tags:[],version:"current",frontMatter:{id:"breadcrumbs",title:"Breadcrumbs",sidebar_label:"Breadcrumbs"},sidebar:"mainSidebar",previous:{title:"Fade and height animations",permalink:"/ngx-nuts-and-bolts/docs/animations"},next:{title:"Form utils",permalink:"/ngx-nuts-and-bolts/docs/form-utils"}},m=[{value:"1. Features",id:"1-features",children:[],level:2},{value:"2. Example application",id:"2-example-application",children:[],level:2},{value:"3. Usage",id:"3-usage",children:[{value:"3.1. Service configuration",id:"31-service-configuration",children:[],level:3},{value:"3.2. Breadcrumbs service",id:"32-breadcrumbs-service",children:[],level:3},{value:"3.3. Breadcrumb data type",id:"33-breadcrumb-data-type",children:[{value:"Simple type",id:"simple-type",children:[],level:4},{value:"Complex type",id:"complex-type",children:[],level:4}],level:3},{value:"3.4. Configuring routes",id:"34-configuring-routes",children:[{value:"Resolver key",id:"resolver-key",children:[],level:4},{value:"Boundaries",id:"boundaries",children:[],level:4}],level:3},{value:"3.5. Resolvers",id:"35-resolvers",children:[{value:"Built-in resolver",id:"built-in-resolver",children:[],level:4},{value:"Writing a custom resolver",id:"writing-a-custom-resolver",children:[],level:4}],level:3}],level:2},{value:"4. Debugging",id:"4-debugging",children:[],level:2},{value:"5. Testing",id:"5-testing",children:[],level:2}],b={toc:m};function h(e){var t=e.components,l=(0,n.Z)(e,d);return(0,i.kt)("wrapper",(0,r.Z)({},b,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"1-features"},"1. Features"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@infinum/ngx-nuts-and-bolts/breadcrumbs")," provides utilities for setting up breadcrumbs by extending configuration options when defining routes. There is also a service that exposes an observable array of breadcrumb objects, based on the currently active route."),(0,i.kt)("p",null,"Additionally and optionally, the title of the webpage can also be updated at the same time when breadcrumbs update."),(0,i.kt)("p",null,"There are no visual components provided, as that is app-specific and should be implemented in the application codebase. Examples on how this could be done are available in the example application."),(0,i.kt)("h2",{id:"2-example-application"},"2. Example application"),(0,i.kt)(s(),{playing:!0,controls:!0,url:o,mdxType:"ReactPlayer"}),(0,i.kt)("p",null,"You can run the app with ",(0,i.kt)("inlineCode",{parentName:"p"},"npm run start:breadcrumbs-example"),"."),(0,i.kt)("p",null,"Please check out ",(0,i.kt)("inlineCode",{parentName:"p"},"apps/breadcrumbs-example")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"libs/breadcrumbs-testbed"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"breadcrumbs-testbed")," lib includes most of the application code that is a good reference for how you should implement breadcrumbs in your app as well. It was separated out in a non-publishable and non-buildable lib just to re-use code for both the example app and unit tests."),(0,i.kt)("p",null,"To showcase various edge cases where navigation might be cancelled because of app-specific route activation/matching and deactivation guards, there are some prompts that happen during navigation that you can play with to see how the app behaves in various cases. This is to simulate real-world examples where you might have guards that prevent navigation if the user is not logged in or that prevent leaving a page with a dirty form."),(0,i.kt)("p",null,"Some files that might be of particular interest:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"How the service is configured in ",(0,i.kt)("inlineCode",{parentName:"li"},"apps/breadcrumbs-example/src/app/app.config.ts"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Including the formatter for title updates."))),(0,i.kt)("li",{parentName:"ul"},"The way routes are defined in ",(0,i.kt)("inlineCode",{parentName:"li"},"libs/breadcrumbs-testbed/src/lib/routes.ts"),"."),(0,i.kt)("li",{parentName:"ul"},"Different resolvers for breadcrumb data in ",(0,i.kt)("inlineCode",{parentName:"li"},"libs/breadcrumbs-testbed/src/lib/breadcrumb-resolvers"),"."),(0,i.kt)("li",{parentName:"ul"},"Example of how to render breadcrumb in ",(0,i.kt)("inlineCode",{parentName:"li"},"libs/breadcrumbs-testbed/src/lib/components/breadcrumbs"),".",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Including conditional rendering based on type of breadcrumb data object. This allows to render not just simple links, but also things like a dropdown selection that triggers navigation.")))),(0,i.kt)("h2",{id:"3-usage"},"3. Usage"),(0,i.kt)("p",null,"In order to use this feature, you must:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Configure the service."),(0,i.kt)("li",{parentName:"ol"},"Define the type of possible values for breadcrumb data."),(0,i.kt)("li",{parentName:"ol"},"Set up routes and breadcrumb resolvers.")),(0,i.kt)("h3",{id:"31-service-configuration"},"3.1. Service configuration"),(0,i.kt)("p",null,"Before you start using breadcrumbs, you should provide configuration. Add ",(0,i.kt)("inlineCode",{parentName:"p"},"provideBreadcrumbsConfig")," to your global providers."),(0,i.kt)("p",null,"Function has a generic that represents breadcrumb data (more on that later)."),(0,i.kt)("p",null,"Config object can be defined full, partially, or not be passed at all. If the object is not passed or if some options are missing, corresponding default options will be used. Default logging level is ",(0,i.kt)("inlineCode",{parentName:"p"},"silent")," and title updates are disabled."),(0,i.kt)("h3",{id:"32-breadcrumbs-service"},"3.2. Breadcrumbs service"),(0,i.kt)("p",null,"Before we get into defining breadcrumbs in routes configuration, we can first look into how we will get the array of breadcrumbs from application perspective."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BreadcrumbsService")," exposes ",(0,i.kt)("inlineCode",{parentName:"p"},"breadcrumbs$")," public property. A new value will be emitted each time breadcrumbs change (i.e. when navigation completes). Type of the emitted value will be an array of objects of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Breadcrumb<T>"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export type Breadcrumb<T> = {\n    url: string;\n    route: ActivatedRouteSnapshot;\n    state: RouterStateSnapshot;\n    data: T;\n};\n")),(0,i.kt)("p",null,"Two most important properties are ",(0,i.kt)("inlineCode",{parentName:"p"},"url")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"url")," - a full absolute URL that corresponds to that route (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"/users"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"/users/1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"users/1/blog-posts"),", etc.). Main use case for this is to have a router link in your template that."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data")," - this will most probably be used for setting the string for the label, but you could also be used for passing on whole objects in case you need more information in each breadcrumb item. It's a generic type of ",(0,i.kt)("inlineCode",{parentName:"li"},"BreadcrumbsService"),", so you will have to define all possible values on the application level (more on that a bit later).")),(0,i.kt)("p",null,"Additional properties ",(0,i.kt)("inlineCode",{parentName:"p"},"route")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," can be used if you need to get some additional information for each individual breadcrumb, based on route that corresponds to a specific breadcrumb item. ",(0,i.kt)("em",{parentName:"p"},"Please note that you should not use ",(0,i.kt)("inlineCode",{parentName:"em"},"state.url"),", as that will initially return a static URL that represents the URL at the time the application is loaded, which is not necessarily ",(0,i.kt)("inlineCode",{parentName:"em"},"/"),". Always use ",(0,i.kt)("inlineCode",{parentName:"em"},"url")," property instead of ",(0,i.kt)("inlineCode",{parentName:"em"},"state.url"))),(0,i.kt)("h3",{id:"33-breadcrumb-data-type"},"3.3. Breadcrumb data type"),(0,i.kt)("p",null,"Whenever a route is activated, breadcrumb for that route gets resolved. There are two important values that get resolved:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"breadcrumbData")," (required) - this is the data that will be referenced by the ",(0,i.kt)("inlineCode",{parentName:"li"},"data")," property of the ",(0,i.kt)("inlineCode",{parentName:"li"},"Breadcrumb")," object."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"routeData")," (optional) - this is the data that will be passed on via routing for use in components.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"BreadcrumbsService")," has one generic ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," that represents ",(0,i.kt)("inlineCode",{parentName:"p"},"breadcrumbData"),". As mentioned in the previous section, ",(0,i.kt)("inlineCode",{parentName:"p"},"breadcrumbs$")," is an Observable of ",(0,i.kt)("inlineCode",{parentName:"p"},"Array<Breadcrumb<T>>"),". In order to work with this service and this observable, you must define all possible types for breadcrumb data."),(0,i.kt)("h4",{id:"simple-type"},"Simple type"),(0,i.kt)("p",null,"The simplest is just a string:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export type MyAppBreadcrumbData = string;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { BreadcrumbsService } from '@infinum/ngx-nuts-and-bolts/breadcrumbs';\n\nconst breadcrumbService: BreadcrumbService<MyAppBreadcrumbData> = inject(BreadcrumbService);\n")),(0,i.kt)("p",null,"The value of the string could be just some text that will simply be shown as a label."),(0,i.kt)("h4",{id:"complex-type"},"Complex type"),(0,i.kt)("p",null,"If you need more data, you could also define more complex type for breadcrumb data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export type MyAppBreadcrumbData = UserModel | BlogPostModel | { text: string; isTranslationKey: string };\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { BreadcrumbsService } from '@infinum/ngx-nuts-and-bolts/breadcrumbs';\n\nconst breadcrumbService: BreadcrumbService<MyAppBreadcrumbData> = inject(BreadcrumbService);\n")),(0,i.kt)("p",null,"Now, when you iterate over ",(0,i.kt)("inlineCode",{parentName:"p"}," breadcrumbService.breadcrumbs$"),", you can have conditional rendering that renders different UI based on whether an individual breadcrumb's ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," value is of type UserModel, BlogPostModel, or a text that can in some cases be displayed directly, or translated if it is a translation key. All of this is in the realm of application codebase. There are some similar examples in the demo app."),(0,i.kt)("p",null,"This library just provides you utilities to set everything up, but it is up to you to decide what data is part of breadcrumbs and how you render them in UI."),(0,i.kt)("h3",{id:"34-configuring-routes"},"3.4. Configuring routes"),(0,i.kt)("p",null,"First, you must wrap your regular route configuration object using ",(0,i.kt)("inlineCode",{parentName:"p"},"breadcrumbRoute"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"+ import { breadcrumbRoute } from '@infinum/ngx-nuts-and-bolts/breadcrumbs';\n\n-{\n+ breadcrumbRoute({\n    path: 'users',\n    component: UsersComponent,\n    ...\n}\n")),(0,i.kt)("p",null,"Next, set a resolver:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-diff"},"- import { breadcrumbRoute } from '@infinum/ngx-nuts-and-bolts/breadcrumbs';\n+ import { breadcrumbRoute, breadcrumbStringResolver } from '@infinum/ngx-nuts-and-bolts/breadcrumbs';\n\nbreadcrumbRoute({\n    path: 'users'\n    component: UsersComponent,\n+   breadcrumbResolver: breadcrumbStringResolver('Users'}),\n    ...\n})\n")),(0,i.kt)("p",null,"The example above is the simples example where you just set an object literal value for the breadcrumbs. There are options for more complex situations."),(0,i.kt)("p",null,"This is all that is mandatory. See following section for more details on additional parameters and how to create custom resolvers."),(0,i.kt)("h4",{id:"resolver-key"},"Resolver key"),(0,i.kt)("p",null,"Breadcrumb resolvers can set data on the route. There is a default key under which the breadcrumb data is resolved - ",(0,i.kt)("inlineCode",{parentName:"p"},"BREADCRUMBS_DEFAULT_RESOLVE_KEY")," (",(0,i.kt)("inlineCode",{parentName:"p"},"breadcrumbs"),"). Changing this can be useful if you want to read this data from the mounted component."),(0,i.kt)("p",null,"You can see an example of this in demo app's customer details component (",(0,i.kt)("inlineCode",{parentName:"p"},"libs/breadcrumbs-testbed/src/lib/pages/customer-details/customer-details.component.ts"),") and route definition where ",(0,i.kt)("inlineCode",{parentName:"p"},"breadcrumbResolverKey")," is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"location")," - matching the input name of the component so that resolved data can be read easily."),(0,i.kt)("h4",{id:"boundaries"},"Boundaries"),(0,i.kt)("p",null,"If you want more than one breadcrumb component, you can also create hierarchical boundaries to show breadcrumbs only for a sub-section of the routing tree. To do this, set ",(0,i.kt)("inlineCode",{parentName:"p"},"breadcrumbBoundary")," in route configuration. Child instance always has a truncated array of breadcrumbs, based on where the boundary was set."),(0,i.kt)("p",null,"Setting a boundary will create multiple instances of the breadcrumbs service - one instance if there are no boundaries and one additional instance for each boundary. You can reference parent ",(0,i.kt)("inlineCode",{parentName:"p"},"BreadcrumbService")," instance via the ",(0,i.kt)("inlineCode",{parentName:"p"},"parentInstance")," property of the ",(0,i.kt)("inlineCode",{parentName:"p"},"BreadcrumbService"),"."),(0,i.kt)("p",null,"Example app has an example of this - it shows a second breadcrumbs component that is truncated to just show breadcrumbs from customer level downwards:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Example of setting a boundary",src:a(299).Z})),(0,i.kt)("h3",{id:"35-resolvers"},"3.5. Resolvers"),(0,i.kt)("p",null,"The goal of breadcrumb resolvers is to:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Return data that will be set as breadcrumb data."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This is mandatory and has to match the type of data that the docs mentioned earlier."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Return route data that will be passed on as route data"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This is optional and can be used for passing data down via route data independently from data that is set in breadcrumbs object.")))),(0,i.kt)("h4",{id:"built-in-resolver"},"Built-in resolver"),(0,i.kt)("p",null,"There is a built-in resolver that allow you to resolve breadcrumbs with static data. This can be useful for very simple use-cases. ",(0,i.kt)("inlineCode",{parentName:"p"},"breadcrumbLiteralResolver")," will set breadcrumb data to whatever value you pass it."),(0,i.kt)("h4",{id:"writing-a-custom-resolver"},"Writing a custom resolver"),(0,i.kt)("p",null,"Please take a look at ",(0,i.kt)("inlineCode",{parentName:"p"},"libs/breadcrumbs-testbed/src/lib/breadcrumb-resolvers/customer-details.breadcrumb-resolver.ts")," for an example of a resolver. It reads customer ID from route parameter, fetches data about that customer, sets customer name as breadcrumb data and passes down the whole customer object as route data."),(0,i.kt)("h2",{id:"4-debugging"},"4. Debugging"),(0,i.kt)("p",null,"When configuring the service via ",(0,i.kt)("inlineCode",{parentName:"p"},"provideBreadcrumbsConfig"),", you can set ",(0,i.kt)("inlineCode",{parentName:"p"},"logLevel")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"debug")," and you should see a verbose debug log in your console:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Debugging log",src:a(3553).Z})),(0,i.kt)("h2",{id:"5-testing"},"5. Testing"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"TODO")))}h.isMDXComponent=!0},299:function(e,t,a){t.Z=a.p+"assets/images/boundaries-5d57909451228148161a8dfc20a1d325.png"},3553:function(e,t,a){t.Z=a.p+"assets/images/debugging-log-07142045d841de0dd1a59525ccac57cd.png"}}]);