"use strict";(self.webpackChunkngx_nuts_and_bolts_docs=self.webpackChunkngx_nuts_and_bolts_docs||[]).push([[114],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),s=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return i.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?i.createElement(f,a(a({ref:n},p),{},{components:t})):i.createElement(f,a({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=t[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5204:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var i=t(7462),r=t(3366),o=(t(7294),t(3905)),a=["components"],l={id:"in-view",title:"InView directive",sidebar_label:"InView directive"},c=void 0,s={unversionedId:"in-view",id:"in-view",title:"InView directive",description:"1. Introduction",source:"@site/docs/in-view.md",sourceDirName:".",slug:"/in-view",permalink:"/ngx-nuts-and-bolts/docs/in-view",tags:[],version:"current",frontMatter:{id:"in-view",title:"InView directive",sidebar_label:"InView directive"},sidebar:"mainSidebar",previous:{title:"Table state helpers",permalink:"/ngx-nuts-and-bolts/docs/table-state"},next:{title:"EnumProperty pipe",permalink:"/ngx-nuts-and-bolts/docs/enum-property"}},p=[{value:"1. Introduction",id:"1-introduction",children:[],level:2},{value:"2. Features",id:"2-features",children:[],level:2},{value:"3. Usage",id:"3-usage",children:[],level:2}],u={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"1-introduction"},"1. Introduction"),(0,o.kt)("p",null,"Often times, one may be interested to know whether or not piece a of DOM is visible on the user's screen. We utilize ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"},"Intersection Observer API")," just for that purpose and this directive is a very simple option-less wrapper around it."),(0,o.kt)("h2",{id:"2-features"},"2. Features"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"infInView")," directive allows you to determine if a piece of DOM is visible on user's screen."),(0,o.kt)("h2",{id:"3-usage"},"3. Usage"),(0,o.kt)("p",null,"Simply add ",(0,o.kt)("inlineCode",{parentName:"p"},"infInView")," directive to whatever DOM node you care about. You can then handle notifications from ",(0,o.kt)("inlineCode",{parentName:"p"},"(inView)")," EventEmitter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { InViewDirective } from '@infinum/ngx-nuts-and-bolts/in-view';\n\n@Component({\n    selector: 'app-example',\n    template: `<div (infInView)=\"inView$.next($event)>{{ inView$ | async }}</div>`,\n})\nclass ExampleComponent {\n    public inView$ = new Subject<boolean>();\n}\n")),(0,o.kt)("p",null,"You can also select the directive with a ",(0,o.kt)("inlineCode",{parentName:"p"},"@ViewChild")," as you would any other and read ",(0,o.kt)("inlineCode",{parentName:"p"},"isInView")," property which reflects current status."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { InViewDirective } from '@infinum/ngx-nuts-and-bolts/in-view';\n\n@Component({\n    selector: 'app-example',\n    template: `<div infInView>{{ inViewDirectiveRef.isInView }}</div>`,\n})\nclass ExampleComponent {\n    @ViewChild(InViewDirective)\n    public inViewDirectiveRef!: InViewDirective;\n}\n")),(0,o.kt)("p",null,"Additionally, you can also export the directive instance in a template directly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { InViewDirective } from '@infinum/ngx-nuts-and-bolts/in-view';\n\n@Component({\n    selector: 'app-example',\n    template: `<div infInView #infInViewRef=\"infInView\">{{ infInViewRef.isInView }}</div>`,\n})\nclass ExampleComponent {}\n")))}d.isMDXComponent=!0}}]);